{"version":3,"file":"fuzzify-pashto.umd.js","sources":["../src/replacer.ts","../src/fuzzify-pashto.ts"],"sourcesContent":["/**\n * Copyright (c) openpashto.com\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// TODO: add southern ش س (at beginning of word?)\nconst sSounds = \"صسثڅ\";\nconst zSounds = \"زضظذځژ\";\nconst tdSounds = \"طتټدډ\";\nconst velarPlosives = \"ګږکقگك\";\nconst rLikeSounds = \"رړڑڼ\";\nconst labialPlosivesAndFricatives = \"فپب\";\n// Includes Arabic ى \\u0649\nconst theFiveYeys = \"ېۍیيئےى\";\nconst guttural = \"ښخشخهحغ\";\n\ninterface IReplacerInfoItem {\n  char: string;\n  ignorable?: boolean;\n}\n\ninterface IPashtoReplacerInfoItem extends IReplacerInfoItem {\n  range?: string;\n  repl?: string;\n  plus?: string[];\n}\n\ninterface IPhoneticsReplacerInfoItem extends IReplacerInfoItem {\n  repl?: string;\n}\n\nexport const pashtoReplacerInfo: IPashtoReplacerInfoItem[] = [\n  { char: \"اً\", range: \"ان\" },\n  { char: \"ا\", range: \"اآهع\", plus: [\"اً\"] }, // TODO: make optional (if not at the beginning of word)\n  { char: \"آ\", range: \"اآه\" },\n  { char: \"ٱ\", range: \"اآه\" },\n  { char: \"ٲ\", range: \"اآه\" },\n  { char: \"ٳ\", range: \"اآه\" },\n\n  { char: \"ی\", range: theFiveYeys },\n  { char: \"ي\", range: theFiveYeys },\n  { char: \"ې\", range: theFiveYeys },\n  { char: \"ۍ\", range: theFiveYeys },\n  { char: \"ئ\", range: theFiveYeys },\n  { char: \"ے\", range: theFiveYeys },\n\n  { char: \"س\", range: sSounds },\n  { char: \"ص\", range: sSounds },\n  { char: \"ث\", range: sSounds },\n  { char: \"څ\", range: sSounds + \"چ\" },\n\n  { char: \"ج\", range: \"چجڅځژ\" },\n  { char: \"چ\", range: \"چجڅځ\" },\n\n  { char: \"ه\", range: \"اهحہ\" },\n  { char: \"ۀ\", range: \"اهحہ\" },\n  { char: \"ہ\", range: \"اهحہ\" },\n\n  { char: \"ع\", range: \"اوع\", ignorable: true },\n  { char: \"و\", range: \"وع\", ignorable: true },\n  { char: \"ؤ\", range: \"وع\"},\n\n  { char: \"ښ\", range: guttural },\n  { char: \"غ\", range: guttural },\n  { char: \"خ\", range: guttural },\n  { char: \"ح\", range: guttural },\n\n  { char: \"ش\", range: \"شښ\" },\n\n  { char: \"ز\", range: zSounds },\n  { char: \"ض\", range: zSounds },\n  { char: \"ذ\", range: zSounds },\n  { char: \"ځ\", range: zSounds + \"جڅ\"},\n  { char: \"ظ\", range: zSounds },\n\n  { char: \"ژ\", range: \"زضظژذځږج\" },\n\n  { char: \"ر\", range: rLikeSounds },\n  { char: \"ړ\", range: rLikeSounds },\n  { char: \"ڑ\", range: rLikeSounds },\n\n  { char: \"ت\", range: tdSounds },\n  { char: \"ټ\", range: tdSounds },\n  { char: \"ٹ\", range: tdSounds },\n  { char: \"ط\", range: tdSounds },\n  { char: \"د\", range: tdSounds },\n  { char: \"ډ\", range: tdSounds },\n  { char: \"ڈ\", range: tdSounds },\n\n  { char: \"نب\", range: \"نبم\" },\n  { char: \"ن\", range: \"نڼ\", plus: [\"اً\"] }, // allow for words using اٌ at the end to be seached for with ن\n  { char: \"ڼ\", range: \"نڼړڑ\" },\n\n  { char: \"ک\", range: velarPlosives },\n  { char: \"ګ\", range: velarPlosives },\n  { char: \"گ\", range: velarPlosives },\n  { char: \"ق\", range: velarPlosives },\n\n  { char: \"ږ\", range: velarPlosives + \"ژ\" },\n\n  { char: \"ب\", range: labialPlosivesAndFricatives },\n  { char: \"پ\", range: labialPlosivesAndFricatives },\n  { char: \"ف\", range: labialPlosivesAndFricatives },\n];\n\n// tslint:disable-next-line\nexport const pashtoReplacerRegex = /اً|ا|آ|ٱ|ٲ|ٳ|ی|ي|ې|ۍ|ئ|ے|س|ص|ث|څ|ج|چ|ه|ۀ|ہ|ع|و|ؤ|ښ|غ|خ|ح|ش|ز|ض|ذ|ځ|ظ|ژ|ر|ړ|ڑ|ت|ټ|ٹ|ط|د|ډ|ڈ|نب|ن|ڼ|ک|ګ|گ|ق|ږ|ب|پ|ف/g;\n\nconst aaySoundLatin = \"h?(?:[aá]a?i|[eé]y|[aá]a?y|[aá]h?i)\";\nconst longASoundLatin = \"(?:[aá]a?)h?\";\nconst shortASoundLatin = \"h?(?:[aáă]a?|au|áu|[uú]|[UÚ]|[ií]|[eé])?h?\";\nconst shwaSoundLatin = \"h?(?:[uú]|[oó]o?|w[uú]|[aáă]|[ií]|[UÚ])?h?\";\nconst ooSoundLatin = \"h?(?:[oó]o?|[áa]u|w[uú]|[aá]w|[uú]|[UÚ])(?:h|w)?\";\nconst eySoundLatin = \"h?(?:[eé]y|[eé]e?|[uú]y|[aá]y|[ií])\";\nconst middleESoundLatin = \"h?(?:[eé]e?|[ií]|[aáă]|[eé])(?:h|y)?\";\nconst iSoundLatin = \"h?(?:[uú]|[aáă]|[ií]|[eé]e?)?h?\";\n\nexport const latinReplacerInfo: IPhoneticsReplacerInfoItem[] = [\n  { char: \"aa\", repl: longASoundLatin },\n  { char: \"áa\", repl: longASoundLatin },\n  { char: \"aai\", repl: aaySoundLatin },\n  { char: \"áai\", repl: aaySoundLatin },\n  { char: \"ai\", repl: aaySoundLatin },\n  { char: \"ái\", repl: aaySoundLatin },\n  { char: \"aay\", repl: aaySoundLatin },\n  { char: \"áay\", repl: aaySoundLatin },\n  { char: \"ay\", repl: aaySoundLatin },\n  { char: \"áy\", repl: aaySoundLatin },\n  { char: \"a\", repl: shortASoundLatin },\n  { char: \"ă\", repl: shortASoundLatin },\n  { char: \"á\", repl: shortASoundLatin },\n  { char: \"u\", repl: shwaSoundLatin },\n  { char: \"ú\", repl: shwaSoundLatin },\n  { char: \"U\", repl: ooSoundLatin },\n  { char: \"Ú\", repl: ooSoundLatin },\n  { char: \"o\", repl: ooSoundLatin },\n  { char: \"ó\", repl: ooSoundLatin },\n  { char: \"oo\", repl: ooSoundLatin },\n  { char: \"óo\", repl: ooSoundLatin },\n  { char: \"i\", repl: iSoundLatin },\n  { char: \"í\", repl: iSoundLatin },\n  { char: \"ey\", repl: eySoundLatin },\n  { char: \"éy\", repl: eySoundLatin },\n  { char: \"ee\", repl: eySoundLatin },\n  { char: \"ée\", repl: eySoundLatin },\n  { char: \"uy\", repl: eySoundLatin },\n  { char: \"úy\", repl: eySoundLatin },\n  { char: \"e\", repl: middleESoundLatin },\n  { char: \"é\", repl: middleESoundLatin },\n  { char: \"w\", repl: \"w{1,2}?[UÚ]?\"},\n  { char: \"y\", repl: \"[ií]?y?\"},\n\n  { char: \"ts\", repl: \"(?:s{1,2}|z{1,2|ts)\"},\n  { char: \"s\", repl: \"(?:s{1,2}|z{1,2|ts)\"},\n  { char: \"dz\", repl: \"(?:dz|z{1,2}|j)\"},\n  { char:  \"z\", repl: \"(?:s{1,2}|dz|z{1,2}|ts)\"},\n  { char: \"t\", repl: \"(?:t{1,2}|T|d{1,2}|D)\"},\n  { char: \"tt\", repl: \"(?:t{1,2}|T|d{1,2}|D)\"},\n  { char: \"T\", repl: \"(?:t{1,2}|T|d{1,2}|D)\"},\n  { char: \"d\", repl: \"(?:t{1,2}|T|d{1,2}|D)\"},\n  { char: \"dd\", repl: \"(?:t{1,2}|T|d{1,2}|D)\"},\n  { char: \"D\", repl: \"(?:t{1,2}|T|d{1,2}|D)\"},\n  { char: \"r\", repl: \"(?:R|r{1,2}|N)\"},\n  { char: \"rr\", repl: \"(?:R|r{1,2}|N)\"},\n  { char: \"R\", repl: \"(?:R|r{1,2}|N)\"},\n  { char: \"n\", repl: \"(?:n{1,2}|N)\"},\n  { char: \"N\", repl: \"(?:R|r{1,2}|N)\"},\n  { char: \"f\", repl: \"(?:f{1,2}|p{1,2})\"},\n  { char: \"ff\", repl: \"(?:f{1,2}|p{1,2})\"},\n  { char: \"b\", repl: \"(?:b{1,2}|p{1,2})\"},\n  { char: \"bb\", repl: \"(?:b{1,2}|p{1,2})\"},\n  { char: \"p\", repl: \"(?:b{1,2}|p{1,2}|f{1,2})\"},\n  { char: \"pp\", repl: \"(?:b{1,2}|p{1,2}|f{1,2})\"},\n\n  { char: \"sh\", repl: \"(?:x|sh)\"},\n  { char: \"x\", repl: \"(?:kh|gh|x|h){1,2}\"},\n  { char: \"kh\", repl: \"(?:kh|gh|x|h){1,2}\"},\n\n  { char: \"k\", repl: \"(?:k{1,2}|q{1,2}|kh|g|G)\"},\n  { char: \"q\", repl: \"(?:k{1,2}|q{1,2}|kh|g|G)\"},\n\n  { char: \"jz\", repl: \"(?:G|jz)\"},\n  { char: \"G\", repl: \"(?:jz|G|g)\"},\n\n  { char: \"g\", repl: \"(?:gh?|k{1,2}|G)\"},\n  { char: \"gh\", repl: \"(?:g|gh|kh|G)\"},\n\n  { char: \"j\", repl: \"(?:j{1,2}|ch|dz)\"},\n  { char: \"ch\", repl: \"(?:j{1,2}|ch)\"},\n\n  { char: \"l\", repl: \"l{1,2}\"},\n  { char: \"ll\", repl: \"l{1,2}\"},\n  { char: \"m\", repl: \"m{1,2}\"},\n  { char: \"mm\", repl: \"m{1,2}\"},\n  { char: \"h\", repl: \"k?h?\"},\n];\n\n// tslint:disable-next-line\nexport const latinReplacerRegex = /aa|áa|a{1,2}[i|y]|á{1,2}[i|y]|a|á|U|Ú|u|ú|o{1,2}|óo|ó|e{1,2}|ée|é|ey|éy|uy|úy|i|í|w|y|q|g|ts|sh|s|dz|z|tt|t|T|dd|d|D|r{1,2}|R|n{1,2}|N|f{1,2}|f|b{1,2}|p{1,2}|x|kh|q|k|gh|g|G|j|ch|ll|l|m{1,2}|h/g;\n","/**\n * Copyright (c) openpashto.com\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {\n  latinReplacerInfo,\n  latinReplacerRegex,\n  pashtoReplacerInfo,\n  pashtoReplacerRegex,\n} from \"./replacer\";\nimport { IFuzzifyOptions } from \"./types\";\n\nexport const pashtoCharacterRange = \"\\u0621-\\u065f\\u0670-\\u06d3\\u06d5\";\n// Unfortunately, without ES2018 lookbehind assertions word boundary matching is not as clean\n// Without lookbehind assertions, we are unable to ignore punctuation directly in front of a word\n// and matching results include a space before the word\nexport const pashtoWordBoundaryBeginning = `(?:^|[^${pashtoCharacterRange}])`;\n// These problems are solved by using the ES2018 lookbehind assertions where environments permit\nexport const pashtoWordBoundaryBeginningWithES2018 = `(?<![${pashtoCharacterRange}])`;\nconst diacritics = \"\\u064b-\\u065f\\u0670\\u0674\"; // pretty generous diactritic range\n\nfunction sanitizeInput(input: string, options: IFuzzifyOptions): string {\n  let safeInput = input.trim().replace(/[#-.]|[[-^]|[?|{}]/g, \"\");\n  if (options.allowSpacesInWords) {\n    safeInput = safeInput.replace(/ /g, \"\");\n  }\n  if (options.ignoreDiacritics) {\n    // Using literal regular expressions instead of variable for security linting\n    safeInput = safeInput.replace(new RegExp(\"[\\u064b-\\u065f\\u0670\\u0674]\", \"g\"), \"\");\n  }\n  return safeInput;\n}\n\nfunction prepareMainRegexLogicLatin(sanitizedInput: string, options: IFuzzifyOptions): string {\n  return sanitizedInput.replace(latinReplacerRegex, (mtch) => {\n    const r = latinReplacerInfo.find((x) => x.char === mtch);\n    const section = r && r.repl;\n    // TODO: Should we allow ignorable letters as we do with the Pashto script?\n    // tslint:disable-next-line\n    return `${section}${options.allowSpacesInWords ? \"\\ ?\" : \"\"}`;\n  });\n}\n\nfunction prepareMainRegexLogicPashto(sanitizedInput: string, options: IFuzzifyOptions): string {\n  return sanitizedInput.replace(pashtoReplacerRegex, (mtch) => {\n    const r = pashtoReplacerInfo.find((x) => x.char === mtch);\n    let section = `[${r && r.range}]`;\n    if (r && r.plus) {\n      const additionalOptionGroups = r.plus.join(\"|\");\n      section = `(?:${section}|${additionalOptionGroups})`;\n    }\n    // tslint:disable-next-line\n    return `${section}${r && r.ignorable ? \"?\" : \"\"}ع?${options.ignoreDiacritics ? `[${diacritics}]?`: \"\"}${options.allowSpacesInWords ? \"\\ ?\" : \"\"}`;\n  });\n}\n\nfunction getBeginningWithAnywhere(options: IFuzzifyOptions): string {\n  // Override the \"anywhere\" when matchWholeWordOnly is true\n  if (options.matchWholeWordOnly) {\n    return (options.script === \"Latin\") ? \"\\\\b\" : pashtoWordBoundaryBeginning;\n  }\n  if (options.returnWholeWord) {\n    // Return the whole world even if matching from the middle (if desired)\n    if (options.script === \"Latin\") {\n      return \"\\\\b\\\\S*\";\n    }\n    return `${pashtoWordBoundaryBeginning}[${pashtoCharacterRange}]*`;\n  }\n  return \"\";\n}\n\nfunction prepareBeginning(options: IFuzzifyOptions): string {\n  // options.matchStart can be \"string\", \"anywhere\", or \"word\" (default)\n  if (options.matchStart === \"string\") {\n    return \"^\";\n  }\n  if (options.matchStart === \"anywhere\") {\n    return getBeginningWithAnywhere(options);\n  }\n  // options.matchStart default \"word\"\n  // return the beginning word boundary depending on whether es2018 is enabled or not\n  if (options.script === \"Latin\") {\n    return \"\\\\b\";\n  }\n  return options.es2018 ? pashtoWordBoundaryBeginningWithES2018 : pashtoWordBoundaryBeginning;\n}\n\nfunction prepareEnding(options: IFuzzifyOptions): string {\n  if (options.matchWholeWordOnly) {\n    return (options.script === \"Latin\") ? \"\\\\b\" : `(?![${pashtoCharacterRange}])`;\n  }\n  if (options.returnWholeWord) {\n    return (options.script === \"Latin\") ? \"\\\\S*\\\\b\" : `[${pashtoCharacterRange}]*(?![${pashtoCharacterRange}])`;\n  }\n  return \"\";\n}\n\n// Main function for returning a regular expression based on a string of Pashto text\nexport function fuzzifyPashto(input: string, options: IFuzzifyOptions = {}): string {\n  const sanitizedInput = sanitizeInput(input, options);\n  let mainRegexLogic: string;\n  if (options.script === \"Latin\") {\n    mainRegexLogic = prepareMainRegexLogicLatin(sanitizedInput, options);\n  } else {\n    mainRegexLogic = prepareMainRegexLogicPashto(sanitizedInput, options);\n  }\n  const beginning = prepareBeginning(options);\n  const ending = prepareEnding(options);\n  return `${beginning}${mainRegexLogic}${ending}`;\n}\n"],"names":["pashtoReplacerInfo","char","range","plus","sSounds","ignorable","zSounds","velarPlosives","pashtoReplacerRegex","aaySoundLatin","shortASoundLatin","ooSoundLatin","eySoundLatin","latinReplacerInfo","repl","latinReplacerRegex","pashtoCharacterRange","pashtoWordBoundaryBeginning","pashtoWordBoundaryBeginningWithES2018","diacritics","prepareBeginning","options","matchStart","matchWholeWordOnly","script","returnWholeWord","getBeginningWithAnywhere","es2018","input","mainRegexLogic","sanitizedInput","safeInput","trim","replace","allowSpacesInWords","ignoreDiacritics","RegExp","sanitizeInput","mtch","r","find","x","prepareMainRegexLogicLatin","section","join","prepareMainRegexLogicPashto","prepareEnding"],"mappings":"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"}